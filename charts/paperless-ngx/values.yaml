paperless:
  replicaCount: 1
  image:
    repository: ghcr.io/paperless-ngx/paperless-ngx
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8000
  ingress:
    enabled: false
    # IngressClassName für Kubernetes 1.18+ (z.B. "nginx", "traefik", "istio")
    # Leer lassen, um den Standard-Ingress-Controller zu verwenden
    className: ""
    # Annotations für den Ingress (z.B. für Cert-Manager, Redirects, etc.)
    # Beispiel für Cert-Manager:
    #   cert-manager.io/cluster-issuer: "letsencrypt-prod"
    #   nginx.ingress.kubernetes.io/ssl-redirect: "true"
    annotations: {}
    # Host-Konfiguration für den Ingress
    hosts:
      - host: paperless-ngx.local
        paths:
          - path: /
            pathType: Prefix
    # TLS-Konfiguration für HTTPS
    # Jeder Eintrag erstellt ein TLS-Zertifikat für die angegebenen Hosts
    # Beispiel-Konfiguration:
    # tls:
    #   - secretName: paperless-ngx-tls
    #     hosts:
    #       - paperless-ngx.example.com
    #       - www.paperless-ngx.example.com
    # 
    # Hinweise:
    # - secretName: Name des Kubernetes Secrets, der das TLS-Zertifikat enthält
    #   Der Secret muss im gleichen Namespace erstellt werden und sollte
    #   die Keys "tls.crt" und "tls.key" enthalten
    # - hosts: Liste der Hostnamen, für die das Zertifikat gültig ist
    #   Diese müssen auch in der "hosts" Liste oben definiert sein
    #
    # Für automatische Zertifikate mit Cert-Manager:
    # 1. Setze die entsprechenden Annotations (siehe oben)
    # 2. Cert-Manager erstellt automatisch den Secret mit dem angegebenen secretName
    # 3. Beispiel:
    #    annotations:
    #      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    #    tls:
    #      - secretName: paperless-ngx-tls
    #        hosts:
    #          - paperless-ngx.example.com
    tls: []
  env:
    existingSecret: ""
    secretKeys:
      databasePasswordKey: "PAPERLESS_DBPASS"
    values:
      PAPERLESS_DBNAME: "paperless"
      PAPERLESS_DBUSER: "paperless"
      PAPERLESS_DBPASS: "paperless"
      PAPERLESS_REDIS: "redis://{{ include \"paperless-ngx.fullname\" . }}-redis:6379"
      PAPERLESS_DBHOST: "{{ include \"paperless-ngx.fullname\" . }}-postgresql"
      PAPERLESS_TIKA_ENABLED: "1"
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://{{ include \"paperless-ngx.fullname\" . }}-gotenberg:3000"
      PAPERLESS_TIKA_ENDPOINT: "http://{{ include \"paperless-ngx.fullname\" . }}-tika:9998"
  persistence:
    data:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      storageClass: ""
      existingClaim: ""
    media:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      storageClass: ""
      existingClaim: ""
    export:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 5Gi
      storageClass: ""
      existingClaim: ""
    consume:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 5Gi
      storageClass: ""
      existingClaim: ""
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

postgresql:
  enabled: true
  image:
    repository: docker.io/library/postgres
    tag: "18"
    pullPolicy: IfNotPresent
  service:
    port: 5432
  auth:
    database: paperless
    username: paperless
    password: paperless
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    storageClass: ""
    existingClaim: ""
  resources: {}

redis:
  enabled: true
  image:
    repository: docker.io/library/redis
    tag: "8"
    pullPolicy: IfNotPresent
  service:
    port: 6379
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 5Gi
    storageClass: ""
    existingClaim: ""
  resources: {}

gotenberg:
  enabled: true
  image:
    repository: docker.io/gotenberg/gotenberg
    tag: "8.24"
    pullPolicy: IfNotPresent
  service:
    port: 3000
  args:
    - "gotenberg"
    - "--chromium-disable-javascript=true"
    - "--chromium-allow-list=file:///tmp/.*"
  resources: {}

tika:
  enabled: true
  image:
    repository: docker.io/apache/tika
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    port: 9998
  resources: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
